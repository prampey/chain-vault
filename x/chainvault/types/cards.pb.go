// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: chainvault/cards.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Cards struct {
	Id     uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CardNo string `protobuf:"bytes,2,opt,name=cardNo,proto3" json:"cardNo,omitempty"`
	Doe    string `protobuf:"bytes,3,opt,name=doe,proto3" json:"doe,omitempty"`
	Cvv    string `protobuf:"bytes,4,opt,name=cvv,proto3" json:"cvv,omitempty"`
}

func (m *Cards) Reset()         { *m = Cards{} }
func (m *Cards) String() string { return proto.CompactTextString(m) }
func (*Cards) ProtoMessage()    {}
func (*Cards) Descriptor() ([]byte, []int) {
	return fileDescriptor_8eee2e630669de09, []int{0}
}
func (m *Cards) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Cards) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Cards.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Cards) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cards.Merge(m, src)
}
func (m *Cards) XXX_Size() int {
	return m.Size()
}
func (m *Cards) XXX_DiscardUnknown() {
	xxx_messageInfo_Cards.DiscardUnknown(m)
}

var xxx_messageInfo_Cards proto.InternalMessageInfo

func (m *Cards) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Cards) GetCardNo() string {
	if m != nil {
		return m.CardNo
	}
	return ""
}

func (m *Cards) GetDoe() string {
	if m != nil {
		return m.Doe
	}
	return ""
}

func (m *Cards) GetCvv() string {
	if m != nil {
		return m.Cvv
	}
	return ""
}

func init() {
	proto.RegisterType((*Cards)(nil), "prampey.chainvault.chainvault.Cards")
}

func init() { proto.RegisterFile("chainvault/cards.proto", fileDescriptor_8eee2e630669de09) }

var fileDescriptor_8eee2e630669de09 = []byte{
	// 190 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4b, 0xce, 0x48, 0xcc,
	0xcc, 0x2b, 0x4b, 0x2c, 0xcd, 0x29, 0xd1, 0x4f, 0x4e, 0x2c, 0x4a, 0x29, 0xd6, 0x2b, 0x28, 0xca,
	0x2f, 0xc9, 0x17, 0x92, 0x2d, 0x28, 0x4a, 0xcc, 0x2d, 0x48, 0xad, 0xd4, 0x43, 0xc8, 0x23, 0x31,
	0x95, 0x82, 0xb9, 0x58, 0x9d, 0x41, 0xaa, 0x85, 0xf8, 0xb8, 0x98, 0x32, 0x53, 0x24, 0x18, 0x15,
	0x18, 0x35, 0x58, 0x82, 0x98, 0x32, 0x53, 0x84, 0xc4, 0xb8, 0xd8, 0x40, 0xc6, 0xf8, 0xe5, 0x4b,
	0x30, 0x29, 0x30, 0x6a, 0x70, 0x06, 0x41, 0x79, 0x42, 0x02, 0x5c, 0xcc, 0x29, 0xf9, 0xa9, 0x12,
	0xcc, 0x60, 0x41, 0x10, 0x13, 0x24, 0x92, 0x5c, 0x56, 0x26, 0xc1, 0x02, 0x11, 0x49, 0x2e, 0x2b,
	0x73, 0xf2, 0x3e, 0xf1, 0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6, 0x07, 0x8f, 0xe4, 0x18, 0x27,
	0x3c, 0x96, 0x63, 0xb8, 0xf0, 0x58, 0x8e, 0xe1, 0xc6, 0x63, 0x39, 0x86, 0x28, 0xc3, 0xf4, 0xcc,
	0x92, 0x8c, 0xd2, 0x24, 0xbd, 0xe4, 0xfc, 0x5c, 0x7d, 0xa8, 0xc3, 0xf4, 0xc1, 0xae, 0xd1, 0x85,
	0xb8, 0xbc, 0x42, 0x1f, 0xc9, 0x1b, 0x25, 0x95, 0x05, 0xa9, 0xc5, 0x49, 0x6c, 0x60, 0x7f, 0x18,
	0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xed, 0x1f, 0x3d, 0x42, 0xe1, 0x00, 0x00, 0x00,
}

func (m *Cards) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Cards) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Cards) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Cvv) > 0 {
		i -= len(m.Cvv)
		copy(dAtA[i:], m.Cvv)
		i = encodeVarintCards(dAtA, i, uint64(len(m.Cvv)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Doe) > 0 {
		i -= len(m.Doe)
		copy(dAtA[i:], m.Doe)
		i = encodeVarintCards(dAtA, i, uint64(len(m.Doe)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CardNo) > 0 {
		i -= len(m.CardNo)
		copy(dAtA[i:], m.CardNo)
		i = encodeVarintCards(dAtA, i, uint64(len(m.CardNo)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintCards(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintCards(dAtA []byte, offset int, v uint64) int {
	offset -= sovCards(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Cards) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCards(uint64(m.Id))
	}
	l = len(m.CardNo)
	if l > 0 {
		n += 1 + l + sovCards(uint64(l))
	}
	l = len(m.Doe)
	if l > 0 {
		n += 1 + l + sovCards(uint64(l))
	}
	l = len(m.Cvv)
	if l > 0 {
		n += 1 + l + sovCards(uint64(l))
	}
	return n
}

func sovCards(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCards(x uint64) (n int) {
	return sovCards(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Cards) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCards
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Cards: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Cards: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardNo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCards
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCards
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CardNo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Doe", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCards
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCards
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Doe = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cvv", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCards
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCards
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cvv = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCards(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCards
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCards(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCards
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCards
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCards
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCards
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCards
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCards
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCards        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCards          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCards = fmt.Errorf("proto: unexpected end of group")
)
